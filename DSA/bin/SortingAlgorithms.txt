
%%%%%%%%%%%%%%%%%%%%%%%% BUBBLE SORT %%%%%%%%%%%%%%%%%%%%%%%%%%
TC - o(N^2)

import java.util.Scanner;

public class Demo {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the array: ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        for(int i = 0; i < n; i++)
        {
            System.out.println("Enter the " + i + "th element: ");
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter the target element to be found: ");
        int target = sc.nextInt();

        System.out.println("Before Sorting ");

        for(int num : arr)
            System.out.print(num + " ");

        System.out.println();

        System.out.println("-------------- OUTPUT -------------- ");

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n-i-1; j++)
            {
                if(arr[j] > arr[j+1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }

            System.out.println();
            for(int num : arr)
                System.out.print(num + " ");
        }

        System.out.println();
        System.out.println("After Sorting ");

        for(int num : arr)
            System.out.print(num+ " ");

    }


}

%%%%%%%%%%%%%%%%%%%%%%% SELECTION SORT %%%%%%%%%%%%%%%%%%%%%%%%%%%%
TC - o(N^2)

import java.util.Scanner;

public class Demo {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the array: ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        for(int i = 0; i < n; i++)
        {
            System.out.println("Enter the " + i + "th element: ");
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter the target element to be found: ");
        int target = sc.nextInt();

        System.out.println("Before Sorting ");

        for(int num : arr)
            System.out.print(num + " ");

        System.out.println();

        System.out.println("%%%%%%%%%%%%%%%% OUTPUT %%%%%%%%%%%%%%%%%%% ");

        int minIndex = -1;
        for(int i = 0; i < n-1; i++)
        {
            minIndex = i;
            for(int j = i+1; j < n; j++)
            {
                if(arr[minIndex] > arr[j])
                    minIndex = j;
            }

            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;

            System.out.println();
            for(int num : arr)
                System.out.print(num + " ");
        }

        System.out.println();
        System.out.println("After Sorting ");

        for(int num : arr)
            System.out.print(num+ " ");

    }

}


%%%%%%%%%%%%%%%%%%%%%%% INSERTION SORT %%%%%%%%%%%%%%%%%%%%%%%%%%%%
TC - o(N^2)
import java.util.Scanner;

public class Demo {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the array: ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        for(int i = 0; i < n; i++)
        {
            System.out.println("Enter the " + i + "th element: ");
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter the target element to be found: ");
        int target = sc.nextInt();

        System.out.println("Before Sorting ");

        for(int num : arr)
            System.out.print(num + " ");

        System.out.println();

        System.out.println("%%%%%%%%%%%%%%%% OUTPUT %%%%%%%%%%%%%%%%%%% ");

        for(int i = 1; i < n; i++)
        {
            int key = arr[i];
            int j = i - 1;

            while (j >= 0 && arr[j] > key){
                arr[j+1] = arr[j];
                j--;
            }

            arr[j+1] = key;

            System.out.println();
            for(int num : arr)
                System.out.print(num + " ");
        }

        System.out.println();
        System.out.println("After Sorting ");

        for(int num : arr)
            System.out.print(num+ " ");

    }


}

%%%%%%%%%%%%%%%%%%%%%%% QUICK SORT %%%%%%%%%%%%%%%%%%%%%%%%%%%%
TC - o(N^2) or O(N*log N)

import java.util.Scanner;

public class Demo {

    public static int partition(int[] arr, int low, int high)
    {
        int pivot = arr[high];
        int i = low - 1;

        for(int j = low; j < high; j++)
        {
            if(arr[j] < pivot)
            {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;

            }
        }

        int temp = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp;

        return i+1;


    }

    public static void quickSort(int[] arr, int low, int high)
    {
        if(low < high){
            int pi = partition(arr, low, high);

            quickSort(arr, low, pi-1);
            quickSort(arr, pi+1, high);
        }


    }

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the array: ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        for(int i = 0; i < n; i++)
        {
            System.out.println("Enter the " + i + "th element: ");
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter the target element to be found: ");
        int target = sc.nextInt();

        System.out.println("Before Sorting ");

        for(int num : arr)
            System.out.print(num + " ");

        System.out.println();

        System.out.println("%%%%%%%%%%%%%%%% OUTPUT %%%%%%%%%%%%%%%%%%% ");

        quickSort(arr, 0, arr.length-1);

        System.out.println();
        System.out.println("After Sorting ");

        for(int num : arr)
            System.out.print(num+ " ");

    }


}

%%%%%%%%%%%%%%%%%%%%%%% MERGE SORT %%%%%%%%%%%%%%%%%%%%%%%%%%%%
TC - O(N*log N)

import java.util.Scanner;

public class Demo {

    public static void merge(int[] arr, int l, int mid, int r)
    {
        int n1 = mid - l + 1;
        int n2 = r-mid;

        int[] lArr = new int[n1];
        int[] rArr = new int[n2];

        for(int i = 0; i < n1; i++) {
            lArr[i] = arr[l + i];
        }

        for(int i = 0; i < n2; i++) {
            rArr[i] = arr[mid + 1 + i];
        }

        int i = 0, j = 0, k = l;
        while(i < n1 && j < n2)
        {
            if(lArr[i] <= rArr[j])
            {
                arr[k++] = lArr[i++];
            }
            else {
                arr[k++] = rArr[j++];
            }

        }

        while(i < n1)
        {
            arr[k++] = lArr[i++];
        }

        while(j < n2)
        {
            arr[k++] = rArr[j++];
        }
    }

    public static void mergeSort(int[] arr, int l, int r)
    {
        if(l < r){
            int mid = (l+r)/2;

            mergeSort(arr, l, mid);
            mergeSort(arr, mid+1, r);
            merge(arr, l, mid, r);
        }


    }

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the array: ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        for(int i = 0; i < n; i++)
        {
            System.out.println("Enter the " + i + "th element: ");
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter the target element to be found: ");
        int target = sc.nextInt();

        System.out.println("Before Sorting ");

        for(int num : arr)
            System.out.print(num + " ");

        System.out.println();

        System.out.println("%%%%%%%%%%%%%%%% OUTPUT %%%%%%%%%%%%%%%%%%% ");

        mergeSort(arr, 0, arr.length-1);

        System.out.println();
        System.out.println("After Sorting ");

        for(int num : arr)
            System.out.print(num+ " ");

    }


}

